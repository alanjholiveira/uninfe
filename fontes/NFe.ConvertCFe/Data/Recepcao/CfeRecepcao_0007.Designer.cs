// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.2.0.15
//    <NameSpace>NFe.Components.Wsdl</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net20</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>None</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><ClassLevel>Public</ClassLevel><PartialClass>True</PartialClass><ClassesInSeparateFiles>False</ClassesInSeparateFiles><ClassesInSeparateFilesDir></ClassesInSeparateFilesDir><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>True</sspNullable><sspString>True</sspString><sspCollection>True</sspCollection><sspComplexType>True</sspComplexType><sspSimpleType>True</sspSimpleType><sspEnumType>True</sspEnumType><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace NFe.ConvertCFe.Data.Recepcao
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace= "http://www.w3.org/2000/09/xmldsig#", IsNullable=false)]
    public partial class envCFe
    {
        
        private string _tpAmb;
        
        private string _idLote;
        
        private string _cUF;
        
        private List<envCFeCFe> _loteCFe;
        
        private string _nSeg;
        
        private string _dhEnvio;
        
        private string _nserieSAT;
        
        private string _versao;
        
        private static XmlSerializer serializer;
        
        public envCFe()
        {
            this._loteCFe = new List<envCFeCFe>();
        }
        
        public string tpAmb
        {
            get
            {
                return this._tpAmb;
            }
            set
            {
                this._tpAmb = value;
            }
        }
        
        public string idLote
        {
            get
            {
                return this._idLote;
            }
            set
            {
                this._idLote = value;
            }
        }
        
        public string cUF
        {
            get
            {
                return this._cUF;
            }
            set
            {
                this._cUF = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayItemAttribute("CFe", IsNullable=false)]
        public List<envCFeCFe> LoteCFe
        {
            get
            {
                return this._loteCFe;
            }
            set
            {
                this._loteCFe = value;
            }
        }
        
        public string nSeg
        {
            get
            {
                return this._nSeg;
            }
            set
            {
                this._nSeg = value;
            }
        }
        
        public string dhEnvio
        {
            get
            {
                return this._dhEnvio;
            }
            set
            {
                this._dhEnvio = value;
            }
        }
        
        public string nserieSAT
        {
            get
            {
                return this._nserieSAT;
            }
            set
            {
                this._nserieSAT = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string versao
        {
            get
            {
                return this._versao;
            }
            set
            {
                this._versao = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFe));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether LoteCFe should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLoteCFe()
        {
            return LoteCFe != null && LoteCFe.Count > 0;
        }
        
        /// <summary>
        /// Test whether tpAmb should be serialized
        /// </summary>
        public virtual bool ShouldSerializetpAmb()
        {
            return !string.IsNullOrEmpty(tpAmb);
        }
        
        /// <summary>
        /// Test whether idLote should be serialized
        /// </summary>
        public virtual bool ShouldSerializeidLote()
        {
            return !string.IsNullOrEmpty(idLote);
        }
        
        /// <summary>
        /// Test whether cUF should be serialized
        /// </summary>
        public virtual bool ShouldSerializecUF()
        {
            return !string.IsNullOrEmpty(cUF);
        }
        
        /// <summary>
        /// Test whether nSeg should be serialized
        /// </summary>
        public virtual bool ShouldSerializenSeg()
        {
            return !string.IsNullOrEmpty(nSeg);
        }
        
        /// <summary>
        /// Test whether dhEnvio should be serialized
        /// </summary>
        public virtual bool ShouldSerializedhEnvio()
        {
            return !string.IsNullOrEmpty(dhEnvio);
        }
        
        /// <summary>
        /// Test whether nserieSAT should be serialized
        /// </summary>
        public virtual bool ShouldSerializenserieSAT()
        {
            return !string.IsNullOrEmpty(nserieSAT);
        }
        
        /// <summary>
        /// Test whether versao should be serialized
        /// </summary>
        public virtual bool ShouldSerializeversao()
        {
            return !string.IsNullOrEmpty(versao);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFe object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFe object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFe obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFe Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFe Deserialize(System.IO.Stream s)
        {
            return ((envCFe)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFe obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFe LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFe
    {
        
        private bool _shouldSerializeAny;
        
        private envCFeCFeInfCFe _infCFe;
        
        private System.Xml.XmlElement _any;
        
        private static XmlSerializer serializer;
        
        public envCFeCFe()
        {
            this._infCFe = new envCFeCFeInfCFe();
        }
        
        public envCFeCFeInfCFe infCFe
        {
            get
            {
                return this._infCFe;
            }
            set
            {
                this._infCFe = value;
            }
        }
        
        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement Any
        {
            get
            {
                return this._any;
            }
            set
            {
                this._any = value;
                _shouldSerializeAny = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFe));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Any should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny()
        {
            if (_shouldSerializeAny)
            {
                return true;
            }
            return (_any != default(System.Xml.XmlElement));
        }
        
        /// <summary>
        /// Test whether infCFe should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfCFe()
        {
            return (_infCFe != null);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFe object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFe object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFe obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFe Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFe Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFe)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFe obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFe LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFe
    {
        
        private envCFeCFeInfCFeIde _ide;
        
        private envCFeCFeInfCFeEmit _emit;
        
        private envCFeCFeInfCFeDest _dest;
        
        private envCFeCFeInfCFeEntrega _entrega;
        
        private List<envCFeCFeInfCFeDet> _det;
        
        private envCFeCFeInfCFeTotal _total;
        
        private envCFeCFeInfCFePgto _pgto;
        
        private envCFeCFeInfCFeInfAdic _infAdic;
        
        private string _versao;
        
        private string _versaoDadosEnt;
        
        private string _versaoSB;
        
        private string _id;
        
        private static XmlSerializer serializer;
        
        public envCFeCFeInfCFe()
        {
            this._infAdic = new envCFeCFeInfCFeInfAdic();
            this._pgto = new envCFeCFeInfCFePgto();
            this._total = new envCFeCFeInfCFeTotal();
            this._det = new List<envCFeCFeInfCFeDet>();
            this._entrega = new envCFeCFeInfCFeEntrega();
            this._dest = new envCFeCFeInfCFeDest();
            this._emit = new envCFeCFeInfCFeEmit();
            this._ide = new envCFeCFeInfCFeIde();
        }
        
        public envCFeCFeInfCFeIde ide
        {
            get
            {
                return this._ide;
            }
            set
            {
                this._ide = value;
            }
        }
        
        public envCFeCFeInfCFeEmit emit
        {
            get
            {
                return this._emit;
            }
            set
            {
                this._emit = value;
            }
        }
        
        public envCFeCFeInfCFeDest dest
        {
            get
            {
                return this._dest;
            }
            set
            {
                this._dest = value;
            }
        }
        
        public envCFeCFeInfCFeEntrega entrega
        {
            get
            {
                return this._entrega;
            }
            set
            {
                this._entrega = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("det")]
        public List<envCFeCFeInfCFeDet> det
        {
            get
            {
                return this._det;
            }
            set
            {
                this._det = value;
            }
        }
        
        public envCFeCFeInfCFeTotal total
        {
            get
            {
                return this._total;
            }
            set
            {
                this._total = value;
            }
        }
        
        public envCFeCFeInfCFePgto pgto
        {
            get
            {
                return this._pgto;
            }
            set
            {
                this._pgto = value;
            }
        }
        
        public envCFeCFeInfCFeInfAdic infAdic
        {
            get
            {
                return this._infAdic;
            }
            set
            {
                this._infAdic = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string versao
        {
            get
            {
                return this._versao;
            }
            set
            {
                this._versao = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string versaoDadosEnt
        {
            get
            {
                return this._versaoDadosEnt;
            }
            set
            {
                this._versaoDadosEnt = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string versaoSB
        {
            get
            {
                return this._versaoSB;
            }
            set
            {
                this._versaoSB = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFe));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether det should be serialized
        /// </summary>
        public virtual bool ShouldSerializedet()
        {
            return det != null && det.Count > 0;
        }
        
        /// <summary>
        /// Test whether ide should be serialized
        /// </summary>
        public virtual bool ShouldSerializeide()
        {
            return (_ide != null);
        }
        
        /// <summary>
        /// Test whether emit should be serialized
        /// </summary>
        public virtual bool ShouldSerializeemit()
        {
            return (_emit != null);
        }
        
        /// <summary>
        /// Test whether dest should be serialized
        /// </summary>
        public virtual bool ShouldSerializedest()
        {
            return (_dest != null);
        }
        
        /// <summary>
        /// Test whether entrega should be serialized
        /// </summary>
        public virtual bool ShouldSerializeentrega()
        {
            return (_entrega != null);
        }
        
        /// <summary>
        /// Test whether total should be serialized
        /// </summary>
        public virtual bool ShouldSerializetotal()
        {
            return (_total != null);
        }
        
        /// <summary>
        /// Test whether pgto should be serialized
        /// </summary>
        public virtual bool ShouldSerializepgto()
        {
            return (_pgto != null);
        }
        
        /// <summary>
        /// Test whether infAdic should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfAdic()
        {
            return (_infAdic != null);
        }
        
        /// <summary>
        /// Test whether versao should be serialized
        /// </summary>
        public virtual bool ShouldSerializeversao()
        {
            return !string.IsNullOrEmpty(versao);
        }
        
        /// <summary>
        /// Test whether versaoDadosEnt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeversaoDadosEnt()
        {
            return !string.IsNullOrEmpty(versaoDadosEnt);
        }
        
        /// <summary>
        /// Test whether versaoSB should be serialized
        /// </summary>
        public virtual bool ShouldSerializeversaoSB()
        {
            return !string.IsNullOrEmpty(versaoSB);
        }
        
        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFe object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFe object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFe);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFe obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFe Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFe Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFe)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFe);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFe obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFe LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeIde
    {
        
        private string _cUF;
        
        private string _cNF;
        
        private string _mod;
        
        private string _nserieSAT;
        
        private string _nCFe;
        
        private string _dEmi;
        
        private string _hEmi;
        
        private string _cDV;
        
        private string _tpAmb;
        
        private string _cNPJ;
        
        private string _signAC;
        
        private string _assinaturaQRCODE;
        
        private string _numeroCaixa;
        
        private static XmlSerializer serializer;
        
        public string cUF
        {
            get
            {
                return this._cUF;
            }
            set
            {
                this._cUF = value;
            }
        }
        
        public string cNF
        {
            get
            {
                return this._cNF;
            }
            set
            {
                this._cNF = value;
            }
        }
        
        public string mod
        {
            get
            {
                return this._mod;
            }
            set
            {
                this._mod = value;
            }
        }
        
        public string nserieSAT
        {
            get
            {
                return this._nserieSAT;
            }
            set
            {
                this._nserieSAT = value;
            }
        }
        
        public string nCFe
        {
            get
            {
                return this._nCFe;
            }
            set
            {
                this._nCFe = value;
            }
        }
        
        public string dEmi
        {
            get
            {
                return this._dEmi;
            }
            set
            {
                this._dEmi = value;
            }
        }
        
        public string hEmi
        {
            get
            {
                return this._hEmi;
            }
            set
            {
                this._hEmi = value;
            }
        }
        
        public string cDV
        {
            get
            {
                return this._cDV;
            }
            set
            {
                this._cDV = value;
            }
        }
        
        public string tpAmb
        {
            get
            {
                return this._tpAmb;
            }
            set
            {
                this._tpAmb = value;
            }
        }
        
        public string CNPJ
        {
            get
            {
                return this._cNPJ;
            }
            set
            {
                this._cNPJ = value;
            }
        }
        
        public string signAC
        {
            get
            {
                return this._signAC;
            }
            set
            {
                this._signAC = value;
            }
        }
        
        public string assinaturaQRCODE
        {
            get
            {
                return this._assinaturaQRCODE;
            }
            set
            {
                this._assinaturaQRCODE = value;
            }
        }
        
        public string numeroCaixa
        {
            get
            {
                return this._numeroCaixa;
            }
            set
            {
                this._numeroCaixa = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeIde));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether cUF should be serialized
        /// </summary>
        public virtual bool ShouldSerializecUF()
        {
            return !string.IsNullOrEmpty(cUF);
        }
        
        /// <summary>
        /// Test whether cNF should be serialized
        /// </summary>
        public virtual bool ShouldSerializecNF()
        {
            return !string.IsNullOrEmpty(cNF);
        }
        
        /// <summary>
        /// Test whether mod should be serialized
        /// </summary>
        public virtual bool ShouldSerializemod()
        {
            return !string.IsNullOrEmpty(mod);
        }
        
        /// <summary>
        /// Test whether nserieSAT should be serialized
        /// </summary>
        public virtual bool ShouldSerializenserieSAT()
        {
            return !string.IsNullOrEmpty(nserieSAT);
        }
        
        /// <summary>
        /// Test whether nCFe should be serialized
        /// </summary>
        public virtual bool ShouldSerializenCFe()
        {
            return !string.IsNullOrEmpty(nCFe);
        }
        
        /// <summary>
        /// Test whether dEmi should be serialized
        /// </summary>
        public virtual bool ShouldSerializedEmi()
        {
            return !string.IsNullOrEmpty(dEmi);
        }
        
        /// <summary>
        /// Test whether hEmi should be serialized
        /// </summary>
        public virtual bool ShouldSerializehEmi()
        {
            return !string.IsNullOrEmpty(hEmi);
        }
        
        /// <summary>
        /// Test whether cDV should be serialized
        /// </summary>
        public virtual bool ShouldSerializecDV()
        {
            return !string.IsNullOrEmpty(cDV);
        }
        
        /// <summary>
        /// Test whether tpAmb should be serialized
        /// </summary>
        public virtual bool ShouldSerializetpAmb()
        {
            return !string.IsNullOrEmpty(tpAmb);
        }
        
        /// <summary>
        /// Test whether CNPJ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCNPJ()
        {
            return !string.IsNullOrEmpty(CNPJ);
        }
        
        /// <summary>
        /// Test whether signAC should be serialized
        /// </summary>
        public virtual bool ShouldSerializesignAC()
        {
            return !string.IsNullOrEmpty(signAC);
        }
        
        /// <summary>
        /// Test whether assinaturaQRCODE should be serialized
        /// </summary>
        public virtual bool ShouldSerializeassinaturaQRCODE()
        {
            return !string.IsNullOrEmpty(assinaturaQRCODE);
        }
        
        /// <summary>
        /// Test whether numeroCaixa should be serialized
        /// </summary>
        public virtual bool ShouldSerializenumeroCaixa()
        {
            return !string.IsNullOrEmpty(numeroCaixa);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeIde object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeIde object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeIde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeIde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeIde);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeIde obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeIde Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeIde)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeIde Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeIde)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeIde object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeIde object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeIde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeIde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeIde);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeIde obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeIde LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeEmit
    {
        
        private string _cNPJ;
        
        private string _xNome;
        
        private string _xFant;
        
        private envCFeCFeInfCFeEmitEnderEmit _enderEmit;
        
        private string _ie;
        
        private string _im;
        
        private string _cRegTrib;
        
        private string _cRegTribISSQN;
        
        private string _indRatISSQN;
        
        private static XmlSerializer serializer;
        
        public envCFeCFeInfCFeEmit()
        {
            this._enderEmit = new envCFeCFeInfCFeEmitEnderEmit();
        }
        
        public string CNPJ
        {
            get
            {
                return this._cNPJ;
            }
            set
            {
                this._cNPJ = value;
            }
        }
        
        public string xNome
        {
            get
            {
                return this._xNome;
            }
            set
            {
                this._xNome = value;
            }
        }
        
        public string xFant
        {
            get
            {
                return this._xFant;
            }
            set
            {
                this._xFant = value;
            }
        }
        
        public envCFeCFeInfCFeEmitEnderEmit enderEmit
        {
            get
            {
                return this._enderEmit;
            }
            set
            {
                this._enderEmit = value;
            }
        }
        
        public string IE
        {
            get
            {
                return this._ie;
            }
            set
            {
                this._ie = value;
            }
        }
        
        public string IM
        {
            get
            {
                return this._im;
            }
            set
            {
                this._im = value;
            }
        }
        
        public string cRegTrib
        {
            get
            {
                return this._cRegTrib;
            }
            set
            {
                this._cRegTrib = value;
            }
        }
        
        public string cRegTribISSQN
        {
            get
            {
                return this._cRegTribISSQN;
            }
            set
            {
                this._cRegTribISSQN = value;
            }
        }
        
        public string indRatISSQN
        {
            get
            {
                return this._indRatISSQN;
            }
            set
            {
                this._indRatISSQN = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeEmit));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether enderEmit should be serialized
        /// </summary>
        public virtual bool ShouldSerializeenderEmit()
        {
            return (_enderEmit != null);
        }
        
        /// <summary>
        /// Test whether CNPJ should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCNPJ()
        {
            return !string.IsNullOrEmpty(CNPJ);
        }
        
        /// <summary>
        /// Test whether xNome should be serialized
        /// </summary>
        public virtual bool ShouldSerializexNome()
        {
            return !string.IsNullOrEmpty(xNome);
        }
        
        /// <summary>
        /// Test whether xFant should be serialized
        /// </summary>
        public virtual bool ShouldSerializexFant()
        {
            return !string.IsNullOrEmpty(xFant);
        }
        
        /// <summary>
        /// Test whether IE should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIE()
        {
            return !string.IsNullOrEmpty(IE);
        }
        
        /// <summary>
        /// Test whether IM should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIM()
        {
            return !string.IsNullOrEmpty(IM);
        }
        
        /// <summary>
        /// Test whether cRegTrib should be serialized
        /// </summary>
        public virtual bool ShouldSerializecRegTrib()
        {
            return !string.IsNullOrEmpty(cRegTrib);
        }
        
        /// <summary>
        /// Test whether cRegTribISSQN should be serialized
        /// </summary>
        public virtual bool ShouldSerializecRegTribISSQN()
        {
            return !string.IsNullOrEmpty(cRegTribISSQN);
        }
        
        /// <summary>
        /// Test whether indRatISSQN should be serialized
        /// </summary>
        public virtual bool ShouldSerializeindRatISSQN()
        {
            return !string.IsNullOrEmpty(indRatISSQN);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeEmit object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeEmit object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeEmit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeEmit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeEmit);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeEmit obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeEmit Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeEmit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeEmit Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeEmit)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeEmit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeEmit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeEmit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeEmit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeEmit);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeEmit obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeEmit LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeEmitEnderEmit
    {
        
        private string _xLgr;
        
        private string _nro;
        
        private string _xCpl;
        
        private string _xBairro;
        
        private string _xMun;
        
        private string _cEP;
        
        private static XmlSerializer serializer;
        
        public string xLgr
        {
            get
            {
                return this._xLgr;
            }
            set
            {
                this._xLgr = value;
            }
        }
        
        public string nro
        {
            get
            {
                return this._nro;
            }
            set
            {
                this._nro = value;
            }
        }
        
        public string xCpl
        {
            get
            {
                return this._xCpl;
            }
            set
            {
                this._xCpl = value;
            }
        }
        
        public string xBairro
        {
            get
            {
                return this._xBairro;
            }
            set
            {
                this._xBairro = value;
            }
        }
        
        public string xMun
        {
            get
            {
                return this._xMun;
            }
            set
            {
                this._xMun = value;
            }
        }
        
        public string CEP
        {
            get
            {
                return this._cEP;
            }
            set
            {
                this._cEP = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeEmitEnderEmit));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether xLgr should be serialized
        /// </summary>
        public virtual bool ShouldSerializexLgr()
        {
            return !string.IsNullOrEmpty(xLgr);
        }
        
        /// <summary>
        /// Test whether nro should be serialized
        /// </summary>
        public virtual bool ShouldSerializenro()
        {
            return !string.IsNullOrEmpty(nro);
        }
        
        /// <summary>
        /// Test whether xCpl should be serialized
        /// </summary>
        public virtual bool ShouldSerializexCpl()
        {
            return !string.IsNullOrEmpty(xCpl);
        }
        
        /// <summary>
        /// Test whether xBairro should be serialized
        /// </summary>
        public virtual bool ShouldSerializexBairro()
        {
            return !string.IsNullOrEmpty(xBairro);
        }
        
        /// <summary>
        /// Test whether xMun should be serialized
        /// </summary>
        public virtual bool ShouldSerializexMun()
        {
            return !string.IsNullOrEmpty(xMun);
        }
        
        /// <summary>
        /// Test whether CEP should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCEP()
        {
            return !string.IsNullOrEmpty(CEP);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeEmitEnderEmit object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeEmitEnderEmit object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeEmitEnderEmit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeEmitEnderEmit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeEmitEnderEmit);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeEmitEnderEmit obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeEmitEnderEmit Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeEmitEnderEmit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeEmitEnderEmit Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeEmitEnderEmit)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeEmitEnderEmit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeEmitEnderEmit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeEmitEnderEmit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeEmitEnderEmit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeEmitEnderEmit);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeEmitEnderEmit obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeEmitEnderEmit LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDest
    {
        
        private bool _shouldSerializeItemElementName;
        
        private string _item;
        
        private ItemChoiceType _itemElementName;
        
        private string _xNome;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("CNPJ")]
        [System.Xml.Serialization.XmlElementAttribute("CPF")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType ItemElementName
        {
            get
            {
                return this._itemElementName;
            }
            set
            {
                this._itemElementName = value;
                _shouldSerializeItemElementName = true;
            }
        }
        
        public string xNome
        {
            get
            {
                return this._xNome;
            }
            set
            {
                this._xNome = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDest));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (_itemElementName != default(ItemChoiceType));
        }
        
        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }
        
        /// <summary>
        /// Test whether xNome should be serialized
        /// </summary>
        public virtual bool ShouldSerializexNome()
        {
            return !string.IsNullOrEmpty(xNome);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDest object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDest object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDest obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDest);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDest obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDest Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDest Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDest)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDest obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDest);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDest obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDest LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public enum ItemChoiceType
    {
        
        /// <remarks/>
        CNPJ,
        
        /// <remarks/>
        CPF,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeEntrega
    {
        
        private string _xLgr;
        
        private string _nro;
        
        private string _xCpl;
        
        private string _xBairro;
        
        private string _xMun;
        
        private string _uf;
        
        private static XmlSerializer serializer;
        
        public string xLgr
        {
            get
            {
                return this._xLgr;
            }
            set
            {
                this._xLgr = value;
            }
        }
        
        public string nro
        {
            get
            {
                return this._nro;
            }
            set
            {
                this._nro = value;
            }
        }
        
        public string xCpl
        {
            get
            {
                return this._xCpl;
            }
            set
            {
                this._xCpl = value;
            }
        }
        
        public string xBairro
        {
            get
            {
                return this._xBairro;
            }
            set
            {
                this._xBairro = value;
            }
        }
        
        public string xMun
        {
            get
            {
                return this._xMun;
            }
            set
            {
                this._xMun = value;
            }
        }
        
        public string UF
        {
            get
            {
                return this._uf;
            }
            set
            {
                this._uf = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeEntrega));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether xLgr should be serialized
        /// </summary>
        public virtual bool ShouldSerializexLgr()
        {
            return !string.IsNullOrEmpty(xLgr);
        }
        
        /// <summary>
        /// Test whether nro should be serialized
        /// </summary>
        public virtual bool ShouldSerializenro()
        {
            return !string.IsNullOrEmpty(nro);
        }
        
        /// <summary>
        /// Test whether xCpl should be serialized
        /// </summary>
        public virtual bool ShouldSerializexCpl()
        {
            return !string.IsNullOrEmpty(xCpl);
        }
        
        /// <summary>
        /// Test whether xBairro should be serialized
        /// </summary>
        public virtual bool ShouldSerializexBairro()
        {
            return !string.IsNullOrEmpty(xBairro);
        }
        
        /// <summary>
        /// Test whether xMun should be serialized
        /// </summary>
        public virtual bool ShouldSerializexMun()
        {
            return !string.IsNullOrEmpty(xMun);
        }
        
        /// <summary>
        /// Test whether UF should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUF()
        {
            return !string.IsNullOrEmpty(UF);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeEntrega object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeEntrega object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeEntrega object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeEntrega obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeEntrega);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeEntrega obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeEntrega Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeEntrega)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeEntrega Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeEntrega)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeEntrega object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeEntrega object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeEntrega object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeEntrega obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeEntrega);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeEntrega obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeEntrega LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDet
    {
        
        private envCFeCFeInfCFeDetProd _prod;
        
        private envCFeCFeInfCFeDetImposto _imposto;
        
        private string _infAdProd;
        
        private string _nItem;
        
        private static XmlSerializer serializer;
        
        public envCFeCFeInfCFeDet()
        {
            this._imposto = new envCFeCFeInfCFeDetImposto();
            this._prod = new envCFeCFeInfCFeDetProd();
        }
        
        public envCFeCFeInfCFeDetProd prod
        {
            get
            {
                return this._prod;
            }
            set
            {
                this._prod = value;
            }
        }
        
        public envCFeCFeInfCFeDetImposto imposto
        {
            get
            {
                return this._imposto;
            }
            set
            {
                this._imposto = value;
            }
        }
        
        public string infAdProd
        {
            get
            {
                return this._infAdProd;
            }
            set
            {
                this._infAdProd = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string nItem
        {
            get
            {
                return this._nItem;
            }
            set
            {
                this._nItem = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDet));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether prod should be serialized
        /// </summary>
        public virtual bool ShouldSerializeprod()
        {
            return (_prod != null);
        }
        
        /// <summary>
        /// Test whether imposto should be serialized
        /// </summary>
        public virtual bool ShouldSerializeimposto()
        {
            return (_imposto != null);
        }
        
        /// <summary>
        /// Test whether infAdProd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfAdProd()
        {
            return !string.IsNullOrEmpty(infAdProd);
        }
        
        /// <summary>
        /// Test whether nItem should be serialized
        /// </summary>
        public virtual bool ShouldSerializenItem()
        {
            return !string.IsNullOrEmpty(nItem);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDet object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDet object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDet);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDet obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDet Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDet)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDet Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDet)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDet object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDet obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDet LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetProd
    {
        
        private string _cProd;
        
        private string _cEAN;
        
        private string _xProd;
        
        private string _nCM;
        
        private string _cFOP;
        
        private string _uCom;
        
        private string _qCom;
        
        private string _vUnCom;
        
        private string _vProd;
        
        private string _indRegra;
        
        private string _vDesc;
        
        private string _vOutro;
        
        private string _vItem;
        
        private string _vRatDesc;
        
        private string _vRatAcr;
        
        private List<envCFeCFeInfCFeDetProdObsFiscoDet> _obsFiscoDet;
        
        private static XmlSerializer serializer;
        
        public envCFeCFeInfCFeDetProd()
        {
            this._obsFiscoDet = new List<envCFeCFeInfCFeDetProdObsFiscoDet>();
        }
        
        public string cProd
        {
            get
            {
                return this._cProd;
            }
            set
            {
                this._cProd = value;
            }
        }
        
        public string cEAN
        {
            get
            {
                return this._cEAN;
            }
            set
            {
                this._cEAN = value;
            }
        }
        
        public string xProd
        {
            get
            {
                return this._xProd;
            }
            set
            {
                this._xProd = value;
            }
        }
        
        public string NCM
        {
            get
            {
                return this._nCM;
            }
            set
            {
                this._nCM = value;
            }
        }
        
        public string CFOP
        {
            get
            {
                return this._cFOP;
            }
            set
            {
                this._cFOP = value;
            }
        }
        
        public string uCom
        {
            get
            {
                return this._uCom;
            }
            set
            {
                this._uCom = value;
            }
        }
        
        public string qCom
        {
            get
            {
                return this._qCom;
            }
            set
            {
                this._qCom = value;
            }
        }
        
        public string vUnCom
        {
            get
            {
                return this._vUnCom;
            }
            set
            {
                this._vUnCom = value;
            }
        }
        
        public string vProd
        {
            get
            {
                return this._vProd;
            }
            set
            {
                this._vProd = value;
            }
        }
        
        public string indRegra
        {
            get
            {
                return this._indRegra;
            }
            set
            {
                this._indRegra = value;
            }
        }
        
        public string vDesc
        {
            get
            {
                return this._vDesc;
            }
            set
            {
                this._vDesc = value;
            }
        }
        
        public string vOutro
        {
            get
            {
                return this._vOutro;
            }
            set
            {
                this._vOutro = value;
            }
        }
        
        public string vItem
        {
            get
            {
                return this._vItem;
            }
            set
            {
                this._vItem = value;
            }
        }
        
        public string vRatDesc
        {
            get
            {
                return this._vRatDesc;
            }
            set
            {
                this._vRatDesc = value;
            }
        }
        
        public string vRatAcr
        {
            get
            {
                return this._vRatAcr;
            }
            set
            {
                this._vRatAcr = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("obsFiscoDet")]
        public List<envCFeCFeInfCFeDetProdObsFiscoDet> obsFiscoDet
        {
            get
            {
                return this._obsFiscoDet;
            }
            set
            {
                this._obsFiscoDet = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetProd));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether obsFiscoDet should be serialized
        /// </summary>
        public virtual bool ShouldSerializeobsFiscoDet()
        {
            return obsFiscoDet != null && obsFiscoDet.Count > 0;
        }
        
        /// <summary>
        /// Test whether cProd should be serialized
        /// </summary>
        public virtual bool ShouldSerializecProd()
        {
            return !string.IsNullOrEmpty(cProd);
        }
        
        /// <summary>
        /// Test whether cEAN should be serialized
        /// </summary>
        public virtual bool ShouldSerializecEAN()
        {
            return !string.IsNullOrEmpty(cEAN);
        }
        
        /// <summary>
        /// Test whether xProd should be serialized
        /// </summary>
        public virtual bool ShouldSerializexProd()
        {
            return !string.IsNullOrEmpty(xProd);
        }
        
        /// <summary>
        /// Test whether NCM should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNCM()
        {
            return !string.IsNullOrEmpty(NCM);
        }
        
        /// <summary>
        /// Test whether CFOP should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCFOP()
        {
            return !string.IsNullOrEmpty(CFOP);
        }
        
        /// <summary>
        /// Test whether uCom should be serialized
        /// </summary>
        public virtual bool ShouldSerializeuCom()
        {
            return !string.IsNullOrEmpty(uCom);
        }
        
        /// <summary>
        /// Test whether qCom should be serialized
        /// </summary>
        public virtual bool ShouldSerializeqCom()
        {
            return !string.IsNullOrEmpty(qCom);
        }
        
        /// <summary>
        /// Test whether vUnCom should be serialized
        /// </summary>
        public virtual bool ShouldSerializevUnCom()
        {
            return !string.IsNullOrEmpty(vUnCom);
        }
        
        /// <summary>
        /// Test whether vProd should be serialized
        /// </summary>
        public virtual bool ShouldSerializevProd()
        {
            return !string.IsNullOrEmpty(vProd);
        }
        
        /// <summary>
        /// Test whether indRegra should be serialized
        /// </summary>
        public virtual bool ShouldSerializeindRegra()
        {
            return !string.IsNullOrEmpty(indRegra);
        }
        
        /// <summary>
        /// Test whether vDesc should be serialized
        /// </summary>
        public virtual bool ShouldSerializevDesc()
        {
            return !string.IsNullOrEmpty(vDesc);
        }
        
        /// <summary>
        /// Test whether vOutro should be serialized
        /// </summary>
        public virtual bool ShouldSerializevOutro()
        {
            return !string.IsNullOrEmpty(vOutro);
        }
        
        /// <summary>
        /// Test whether vItem should be serialized
        /// </summary>
        public virtual bool ShouldSerializevItem()
        {
            return !string.IsNullOrEmpty(vItem);
        }
        
        /// <summary>
        /// Test whether vRatDesc should be serialized
        /// </summary>
        public virtual bool ShouldSerializevRatDesc()
        {
            return !string.IsNullOrEmpty(vRatDesc);
        }
        
        /// <summary>
        /// Test whether vRatAcr should be serialized
        /// </summary>
        public virtual bool ShouldSerializevRatAcr()
        {
            return !string.IsNullOrEmpty(vRatAcr);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetProd object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetProd object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetProd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetProd);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetProd obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetProd Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetProd)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetProd Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetProd)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetProd object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetProd object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetProd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetProd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetProd);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetProd obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetProd LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetProdObsFiscoDet
    {
        
        private string _xTextoDet;
        
        private string _xCampoDet;
        
        private static XmlSerializer serializer;
        
        public string xTextoDet
        {
            get
            {
                return this._xTextoDet;
            }
            set
            {
                this._xTextoDet = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string xCampoDet
        {
            get
            {
                return this._xCampoDet;
            }
            set
            {
                this._xCampoDet = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetProdObsFiscoDet));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether xTextoDet should be serialized
        /// </summary>
        public virtual bool ShouldSerializexTextoDet()
        {
            return !string.IsNullOrEmpty(xTextoDet);
        }
        
        /// <summary>
        /// Test whether xCampoDet should be serialized
        /// </summary>
        public virtual bool ShouldSerializexCampoDet()
        {
            return !string.IsNullOrEmpty(xCampoDet);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetProdObsFiscoDet object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetProdObsFiscoDet object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetProdObsFiscoDet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetProdObsFiscoDet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetProdObsFiscoDet);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetProdObsFiscoDet obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetProdObsFiscoDet Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetProdObsFiscoDet)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetProdObsFiscoDet Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetProdObsFiscoDet)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetProdObsFiscoDet object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetProdObsFiscoDet object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetProdObsFiscoDet object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetProdObsFiscoDet obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetProdObsFiscoDet);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetProdObsFiscoDet obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetProdObsFiscoDet LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImposto
    {
        
        private bool _shouldSerializeItem;
        
        private string _vItem12741;
        
        private object _item;
        
        private envCFeCFeInfCFeDetImpostoPIS _pIS;
        
        private envCFeCFeInfCFeDetImpostoPISST _pISST;
        
        private envCFeCFeInfCFeDetImpostoCOFINS _cOFINS;
        
        private envCFeCFeInfCFeDetImpostoCOFINSST _cOFINSST;
        
        private static XmlSerializer serializer;
        
        public envCFeCFeInfCFeDetImposto()
        {
            this._cOFINSST = new envCFeCFeInfCFeDetImpostoCOFINSST();
            this._cOFINS = new envCFeCFeInfCFeDetImpostoCOFINS();
            this._pISST = new envCFeCFeInfCFeDetImpostoPISST();
            this._pIS = new envCFeCFeInfCFeDetImpostoPIS();
        }
        
        public string vItem12741
        {
            get
            {
                return this._vItem12741;
            }
            set
            {
                this._vItem12741 = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ICMS", typeof(envCFeCFeInfCFeDetImpostoICMS))]
        [System.Xml.Serialization.XmlElementAttribute("ISSQN", typeof(envCFeCFeInfCFeDetImpostoISSQN))]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
                _shouldSerializeItem = true;
            }
        }
        
        public envCFeCFeInfCFeDetImpostoPIS PIS
        {
            get
            {
                return this._pIS;
            }
            set
            {
                this._pIS = value;
            }
        }
        
        public envCFeCFeInfCFeDetImpostoPISST PISST
        {
            get
            {
                return this._pISST;
            }
            set
            {
                this._pISST = value;
            }
        }
        
        public envCFeCFeInfCFeDetImpostoCOFINS COFINS
        {
            get
            {
                return this._cOFINS;
            }
            set
            {
                this._cOFINS = value;
            }
        }
        
        public envCFeCFeInfCFeDetImpostoCOFINSST COFINSST
        {
            get
            {
                return this._cOFINSST;
            }
            set
            {
                this._cOFINSST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImposto));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (_item != default(object));
        }
        
        /// <summary>
        /// Test whether PIS should be serialized
        /// </summary>
        public virtual bool ShouldSerializePIS()
        {
            return (_pIS != null);
        }
        
        /// <summary>
        /// Test whether PISST should be serialized
        /// </summary>
        public virtual bool ShouldSerializePISST()
        {
            return !string.IsNullOrEmpty(_pISST.vPIS);            
        }
        
        /// <summary>
        /// Test whether COFINS should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCOFINS()
        {
            return (_cOFINS != null);
        }
        
        /// <summary>
        /// Test whether COFINSST should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCOFINSST()
        {
            return !string.IsNullOrEmpty(_cOFINSST.vCOFINS);            
        }
        
        /// <summary>
        /// Test whether vItem12741 should be serialized
        /// </summary>
        public virtual bool ShouldSerializevItem12741()
        {
            return !string.IsNullOrEmpty(vItem12741);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImposto object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImposto object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImposto object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImposto obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImposto);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImposto obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImposto Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImposto)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImposto Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImposto)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImposto object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImposto object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImposto object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImposto obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImposto);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImposto obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImposto LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoICMS
    {
        
        private bool _shouldSerializeItem;
        
        private object _item;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("ICMS00", typeof(envCFeCFeInfCFeDetImpostoICMSICMS00))]
        [System.Xml.Serialization.XmlElementAttribute("ICMS40", typeof(envCFeCFeInfCFeDetImpostoICMSICMS40))]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN102", typeof(envCFeCFeInfCFeDetImpostoICMSICMSSN102))]
        [System.Xml.Serialization.XmlElementAttribute("ICMSSN900", typeof(envCFeCFeInfCFeDetImpostoICMSICMSSN900))]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
                _shouldSerializeItem = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoICMS));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (_item != default(object));
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoICMS object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoICMS object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoICMS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoICMS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoICMS);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoICMS obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoICMS Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoICMS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoICMS Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoICMS)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoICMS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoICMS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoICMS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoICMS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoICMS);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoICMS obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoICMS LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoICMSICMS00
    {
        
        private string _orig;
        
        private string _cST;
        
        private string _pICMS;
        
        private string _vICMS;
        
        private static XmlSerializer serializer;
        
        public string Orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        public string CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        public string pICMS
        {
            get
            {
                return this._pICMS;
            }
            set
            {
                this._pICMS = value;
            }
        }
        
        public string vICMS
        {
            get
            {
                return this._vICMS;
            }
            set
            {
                this._vICMS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoICMSICMS00));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Orig should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrig()
        {
            return !string.IsNullOrEmpty(Orig);
        }
        
        /// <summary>
        /// Test whether CST should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCST()
        {
            return !string.IsNullOrEmpty(CST);
        }
        
        /// <summary>
        /// Test whether pICMS should be serialized
        /// </summary>
        public virtual bool ShouldSerializepICMS()
        {
            return !string.IsNullOrEmpty(pICMS);
        }
        
        /// <summary>
        /// Test whether vICMS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevICMS()
        {
            return !string.IsNullOrEmpty(vICMS);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoICMSICMS00 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoICMSICMS00 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoICMSICMS00 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoICMSICMS00 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoICMSICMS00);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoICMSICMS00 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoICMSICMS00 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoICMSICMS00)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoICMSICMS00 Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoICMSICMS00)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoICMSICMS00 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoICMSICMS00 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoICMSICMS00 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoICMSICMS00 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoICMSICMS00);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoICMSICMS00 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoICMSICMS00 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoICMSICMS40
    {
        
        private string _orig;
        
        private string _cST;
        
        private static XmlSerializer serializer;
        
        public string Orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        public string CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoICMSICMS40));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Orig should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrig()
        {
            return !string.IsNullOrEmpty(Orig);
        }
        
        /// <summary>
        /// Test whether CST should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCST()
        {
            return !string.IsNullOrEmpty(CST);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoICMSICMS40 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoICMSICMS40 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoICMSICMS40 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoICMSICMS40 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoICMSICMS40);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoICMSICMS40 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoICMSICMS40 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoICMSICMS40)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoICMSICMS40 Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoICMSICMS40)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoICMSICMS40 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoICMSICMS40 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoICMSICMS40 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoICMSICMS40 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoICMSICMS40);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoICMSICMS40 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoICMSICMS40 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoICMSICMSSN102
    {
        
        private string _orig;
        
        private string _cSOSN;
        
        private static XmlSerializer serializer;
        
        public string Orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        public string CSOSN
        {
            get
            {
                return this._cSOSN;
            }
            set
            {
                this._cSOSN = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoICMSICMSSN102));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Orig should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrig()
        {
            return !string.IsNullOrEmpty(Orig);
        }
        
        /// <summary>
        /// Test whether CSOSN should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCSOSN()
        {
            return !string.IsNullOrEmpty(CSOSN);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoICMSICMSSN102 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoICMSICMSSN102 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoICMSICMSSN102 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoICMSICMSSN102 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoICMSICMSSN102);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoICMSICMSSN102 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoICMSICMSSN102 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoICMSICMSSN102)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoICMSICMSSN102 Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoICMSICMSSN102)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoICMSICMSSN102 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoICMSICMSSN102 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoICMSICMSSN102 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoICMSICMSSN102 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoICMSICMSSN102);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoICMSICMSSN102 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoICMSICMSSN102 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoICMSICMSSN900
    {
        
        private string _orig;
        
        private string _cSOSN;
        
        private string _pICMS;
        
        private string _vICMS;
        
        private static XmlSerializer serializer;
        
        public string Orig
        {
            get
            {
                return this._orig;
            }
            set
            {
                this._orig = value;
            }
        }
        
        public string CSOSN
        {
            get
            {
                return this._cSOSN;
            }
            set
            {
                this._cSOSN = value;
            }
        }
        
        public string pICMS
        {
            get
            {
                return this._pICMS;
            }
            set
            {
                this._pICMS = value;
            }
        }
        
        public string vICMS
        {
            get
            {
                return this._vICMS;
            }
            set
            {
                this._vICMS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoICMSICMSSN900));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Orig should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrig()
        {
            return !string.IsNullOrEmpty(Orig);
        }
        
        /// <summary>
        /// Test whether CSOSN should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCSOSN()
        {
            return !string.IsNullOrEmpty(CSOSN);
        }
        
        /// <summary>
        /// Test whether pICMS should be serialized
        /// </summary>
        public virtual bool ShouldSerializepICMS()
        {
            return !string.IsNullOrEmpty(pICMS);
        }
        
        /// <summary>
        /// Test whether vICMS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevICMS()
        {
            return !string.IsNullOrEmpty(vICMS);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoICMSICMSSN900 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoICMSICMSSN900 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoICMSICMSSN900 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoICMSICMSSN900 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoICMSICMSSN900);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoICMSICMSSN900 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoICMSICMSSN900 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoICMSICMSSN900)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoICMSICMSSN900 Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoICMSICMSSN900)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoICMSICMSSN900 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoICMSICMSSN900 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoICMSICMSSN900 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoICMSICMSSN900 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoICMSICMSSN900);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoICMSICMSSN900 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoICMSICMSSN900 LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoISSQN
    {
        
        private string _vDeducISSQN;
        
        private string _vBC;
        
        private string _vAliq;
        
        private string _vISSQN;
        
        private string _cMunFG;
        
        private string _cListServ;
        
        private string _cServTribMun;
        
        private string _cNatOp;
        
        private string _indIncFisc;
        
        private static XmlSerializer serializer;
        
        public string vDeducISSQN
        {
            get
            {
                return this._vDeducISSQN;
            }
            set
            {
                this._vDeducISSQN = value;
            }
        }
        
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        public string vAliq
        {
            get
            {
                return this._vAliq;
            }
            set
            {
                this._vAliq = value;
            }
        }
        
        public string vISSQN
        {
            get
            {
                return this._vISSQN;
            }
            set
            {
                this._vISSQN = value;
            }
        }
        
        public string cMunFG
        {
            get
            {
                return this._cMunFG;
            }
            set
            {
                this._cMunFG = value;
            }
        }
        
        public string cListServ
        {
            get
            {
                return this._cListServ;
            }
            set
            {
                this._cListServ = value;
            }
        }
        
        public string cServTribMun
        {
            get
            {
                return this._cServTribMun;
            }
            set
            {
                this._cServTribMun = value;
            }
        }
        
        public string cNatOp
        {
            get
            {
                return this._cNatOp;
            }
            set
            {
                this._cNatOp = value;
            }
        }
        
        public string indIncFisc
        {
            get
            {
                return this._indIncFisc;
            }
            set
            {
                this._indIncFisc = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoISSQN));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether vDeducISSQN should be serialized
        /// </summary>
        public virtual bool ShouldSerializevDeducISSQN()
        {
            return !string.IsNullOrEmpty(vDeducISSQN);
        }
        
        /// <summary>
        /// Test whether vBC should be serialized
        /// </summary>
        public virtual bool ShouldSerializevBC()
        {
            return !string.IsNullOrEmpty(vBC);
        }
        
        /// <summary>
        /// Test whether vAliq should be serialized
        /// </summary>
        public virtual bool ShouldSerializevAliq()
        {
            return !string.IsNullOrEmpty(vAliq);
        }
        
        /// <summary>
        /// Test whether vISSQN should be serialized
        /// </summary>
        public virtual bool ShouldSerializevISSQN()
        {
            return !string.IsNullOrEmpty(vISSQN);
        }
        
        /// <summary>
        /// Test whether cMunFG should be serialized
        /// </summary>
        public virtual bool ShouldSerializecMunFG()
        {
            return !string.IsNullOrEmpty(cMunFG);
        }
        
        /// <summary>
        /// Test whether cListServ should be serialized
        /// </summary>
        public virtual bool ShouldSerializecListServ()
        {
            return !string.IsNullOrEmpty(cListServ);
        }
        
        /// <summary>
        /// Test whether cServTribMun should be serialized
        /// </summary>
        public virtual bool ShouldSerializecServTribMun()
        {
            return !string.IsNullOrEmpty(cServTribMun);
        }
        
        /// <summary>
        /// Test whether cNatOp should be serialized
        /// </summary>
        public virtual bool ShouldSerializecNatOp()
        {
            return !string.IsNullOrEmpty(cNatOp);
        }
        
        /// <summary>
        /// Test whether indIncFisc should be serialized
        /// </summary>
        public virtual bool ShouldSerializeindIncFisc()
        {
            return !string.IsNullOrEmpty(indIncFisc);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoISSQN object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoISSQN object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoISSQN object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoISSQN obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoISSQN);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoISSQN obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoISSQN Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoISSQN)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoISSQN Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoISSQN)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoISSQN object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoISSQN object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoISSQN object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoISSQN obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoISSQN);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoISSQN obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoISSQN LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoPIS
    {
        
        private bool _shouldSerializeItem;
        
        private object _item;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("PISAliq", typeof(envCFeCFeInfCFeDetImpostoPISPISAliq))]
        [System.Xml.Serialization.XmlElementAttribute("PISNT", typeof(envCFeCFeInfCFeDetImpostoPISPISNT))]
        [System.Xml.Serialization.XmlElementAttribute("PISOutr", typeof(envCFeCFeInfCFeDetImpostoPISPISOutr))]
        [System.Xml.Serialization.XmlElementAttribute("PISQtde", typeof(envCFeCFeInfCFeDetImpostoPISPISQtde))]
        [System.Xml.Serialization.XmlElementAttribute("PISSN", typeof(envCFeCFeInfCFeDetImpostoPISPISSN))]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
                _shouldSerializeItem = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoPIS));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (_item != default(object));
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPIS object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoPIS object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPIS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPIS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPIS);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPIS obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPIS Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoPIS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoPIS Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoPIS)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPIS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoPIS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPIS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPIS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPIS);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPIS obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPIS LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoPISPISAliq
    {
        
        private string _cST;
        
        private string _vBC;
        
        private string _pPIS;
        
        private string _vPIS;
        
        private static XmlSerializer serializer;
        
        public string CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        public string pPIS
        {
            get
            {
                return this._pPIS;
            }
            set
            {
                this._pPIS = value;
            }
        }
        
        public string vPIS
        {
            get
            {
                return this._vPIS;
            }
            set
            {
                this._vPIS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoPISPISAliq));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether CST should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCST()
        {
            return !string.IsNullOrEmpty(CST);
        }
        
        /// <summary>
        /// Test whether vBC should be serialized
        /// </summary>
        public virtual bool ShouldSerializevBC()
        {
            return !string.IsNullOrEmpty(vBC);
        }
        
        /// <summary>
        /// Test whether pPIS should be serialized
        /// </summary>
        public virtual bool ShouldSerializepPIS()
        {
            return !string.IsNullOrEmpty(pPIS);
        }
        
        /// <summary>
        /// Test whether vPIS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevPIS()
        {
            return !string.IsNullOrEmpty(vPIS);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPISPISAliq object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoPISPISAliq object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPISPISAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPISPISAliq obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPISPISAliq);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPISPISAliq obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISAliq Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoPISPISAliq)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISAliq Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoPISPISAliq)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPISPISAliq object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoPISPISAliq object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPISPISAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPISPISAliq obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPISPISAliq);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPISPISAliq obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISAliq LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoPISPISNT
    {
        
        private string _cST;
        
        private static XmlSerializer serializer;
        
        public string CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoPISPISNT));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether CST should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCST()
        {
            return !string.IsNullOrEmpty(CST);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPISPISNT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoPISPISNT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPISPISNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPISPISNT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPISPISNT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPISPISNT obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISNT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoPISPISNT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISNT Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoPISPISNT)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPISPISNT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoPISPISNT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPISPISNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPISPISNT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPISPISNT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPISPISNT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISNT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoPISPISOutr
    {
        
        private string _cST;
        
        private string[] _items;
        
        private ItemsChoiceType[] _itemsElementName;
        
        private string _vPIS;
        
        private static XmlSerializer serializer;
        
        public string CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pPIS")]
        [System.Xml.Serialization.XmlElementAttribute("qBCProd")]
        [System.Xml.Serialization.XmlElementAttribute("vAliqProd")]
        [System.Xml.Serialization.XmlElementAttribute("vBC")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType[] ItemsElementName
        {
            get
            {
                return this._itemsElementName;
            }
            set
            {
                this._itemsElementName = value;
            }
        }
        
        public string vPIS
        {
            get
            {
                return this._vPIS;
            }
            set
            {
                this._vPIS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoPISPISOutr));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether CST should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCST()
        {
            return !string.IsNullOrEmpty(CST);
        }
        
        /// <summary>
        /// Test whether vPIS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevPIS()
        {
            return !string.IsNullOrEmpty(vPIS);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPISPISOutr object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoPISPISOutr object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPISPISOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPISPISOutr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPISPISOutr);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPISPISOutr obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISOutr Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoPISPISOutr)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISOutr Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoPISPISOutr)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPISPISOutr object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoPISPISOutr object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPISPISOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPISPISOutr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPISPISOutr);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPISPISOutr obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISOutr LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public enum ItemsChoiceType
    {
        
        /// <remarks/>
        pPIS,
        
        /// <remarks/>
        qBCProd,
        
        /// <remarks/>
        vAliqProd,
        
        /// <remarks/>
        vBC,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoPISPISQtde
    {
        
        private string _cST;
        
        private string _qBCProd;
        
        private string _vAliqProd;
        
        private string _vPIS;
        
        private static XmlSerializer serializer;
        
        public string CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        public string qBCProd
        {
            get
            {
                return this._qBCProd;
            }
            set
            {
                this._qBCProd = value;
            }
        }
        
        public string vAliqProd
        {
            get
            {
                return this._vAliqProd;
            }
            set
            {
                this._vAliqProd = value;
            }
        }
        
        public string vPIS
        {
            get
            {
                return this._vPIS;
            }
            set
            {
                this._vPIS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoPISPISQtde));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether CST should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCST()
        {
            return !string.IsNullOrEmpty(CST);
        }
        
        /// <summary>
        /// Test whether qBCProd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeqBCProd()
        {
            return !string.IsNullOrEmpty(qBCProd);
        }
        
        /// <summary>
        /// Test whether vAliqProd should be serialized
        /// </summary>
        public virtual bool ShouldSerializevAliqProd()
        {
            return !string.IsNullOrEmpty(vAliqProd);
        }
        
        /// <summary>
        /// Test whether vPIS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevPIS()
        {
            return !string.IsNullOrEmpty(vPIS);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPISPISQtde object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoPISPISQtde object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPISPISQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPISPISQtde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPISPISQtde);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPISPISQtde obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISQtde Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoPISPISQtde)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISQtde Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoPISPISQtde)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPISPISQtde object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoPISPISQtde object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPISPISQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPISPISQtde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPISPISQtde);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPISPISQtde obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISQtde LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoPISPISSN
    {
        
        private string _cST;
        
        private static XmlSerializer serializer;
        
        public string CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoPISPISSN));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether CST should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCST()
        {
            return !string.IsNullOrEmpty(CST);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPISPISSN object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoPISPISSN object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPISPISSN object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPISPISSN obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPISPISSN);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPISPISSN obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISSN Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoPISPISSN)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISSN Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoPISPISSN)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPISPISSN object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoPISPISSN object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPISPISSN object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPISPISSN obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPISPISSN);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPISPISSN obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPISPISSN LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoPISST
    {
        
        private string[] _items;
        
        private ItemsChoiceType1[] _itemsElementName;
        
        private string _vPIS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("pPIS")]
        [System.Xml.Serialization.XmlElementAttribute("qBCProd")]
        [System.Xml.Serialization.XmlElementAttribute("vAliqProd")]
        [System.Xml.Serialization.XmlElementAttribute("vBC")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType1[] ItemsElementName
        {
            get
            {
                return this._itemsElementName;
            }
            set
            {
                this._itemsElementName = value;
            }
        }
        
        public string vPIS
        {
            get
            {
                return this._vPIS;
            }
            set
            {
                this._vPIS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoPISST));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether vPIS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevPIS()
        {
            return !string.IsNullOrEmpty(vPIS);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPISST object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoPISST object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPISST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPISST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPISST);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoPISST obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPISST Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoPISST)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoPISST Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoPISST)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoPISST object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoPISST object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoPISST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPISST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoPISST);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoPISST obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoPISST LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public enum ItemsChoiceType1
    {
        
        /// <remarks/>
        pPIS,
        
        /// <remarks/>
        qBCProd,
        
        /// <remarks/>
        vAliqProd,
        
        /// <remarks/>
        vBC,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoCOFINS
    {
        
        private bool _shouldSerializeItem;
        
        private object _item;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("COFINSAliq", typeof(envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq))]
        [System.Xml.Serialization.XmlElementAttribute("COFINSNT", typeof(envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT))]
        [System.Xml.Serialization.XmlElementAttribute("COFINSOutr", typeof(envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr))]
        [System.Xml.Serialization.XmlElementAttribute("COFINSQtde", typeof(envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde))]
        [System.Xml.Serialization.XmlElementAttribute("COFINSSN", typeof(envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN))]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
                _shouldSerializeItem = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoCOFINS));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (_item != default(object));
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINS object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoCOFINS object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINS);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINS obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINS Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoCOFINS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINS Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoCOFINS)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoCOFINS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINS);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINS obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINS LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq
    {
        
        private string _cST;
        
        private string _vBC;
        
        private string _pCOFINS;
        
        private string _vCOFINS;
        
        private static XmlSerializer serializer;
        
        public string CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        public string pCOFINS
        {
            get
            {
                return this._pCOFINS;
            }
            set
            {
                this._pCOFINS = value;
            }
        }
        
        public string vCOFINS
        {
            get
            {
                return this._vCOFINS;
            }
            set
            {
                this._vCOFINS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether CST should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCST()
        {
            return !string.IsNullOrEmpty(CST);
        }
        
        /// <summary>
        /// Test whether vBC should be serialized
        /// </summary>
        public virtual bool ShouldSerializevBC()
        {
            return !string.IsNullOrEmpty(vBC);
        }
        
        /// <summary>
        /// Test whether pCOFINS should be serialized
        /// </summary>
        public virtual bool ShouldSerializepCOFINS()
        {
            return !string.IsNullOrEmpty(pCOFINS);
        }
        
        /// <summary>
        /// Test whether vCOFINS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevCOFINS()
        {
            return !string.IsNullOrEmpty(vCOFINS);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSAliq LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT
    {
        
        private string _cST;
        
        private static XmlSerializer serializer;
        
        public string CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether CST should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCST()
        {
            return !string.IsNullOrEmpty(CST);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSNT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr
    {
        
        private string _cST;
        
        private string[] _items;
        
        private ItemsChoiceType2[] _itemsElementName;
        
        private string _vCOFINS;
        
        private static XmlSerializer serializer;
        
        public string CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pCOFINS")]
        [System.Xml.Serialization.XmlElementAttribute("qBCProd")]
        [System.Xml.Serialization.XmlElementAttribute("vAliqProd")]
        [System.Xml.Serialization.XmlElementAttribute("vBC")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType2[] ItemsElementName
        {
            get
            {
                return this._itemsElementName;
            }
            set
            {
                this._itemsElementName = value;
            }
        }
        
        public string vCOFINS
        {
            get
            {
                return this._vCOFINS;
            }
            set
            {
                this._vCOFINS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether CST should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCST()
        {
            return !string.IsNullOrEmpty(CST);
        }
        
        /// <summary>
        /// Test whether vCOFINS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevCOFINS()
        {
            return !string.IsNullOrEmpty(vCOFINS);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSOutr LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public enum ItemsChoiceType2
    {
        
        /// <remarks/>
        pCOFINS,
        
        /// <remarks/>
        qBCProd,
        
        /// <remarks/>
        vAliqProd,
        
        /// <remarks/>
        vBC,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde
    {
        
        private string _cST;
        
        private string _qBCProd;
        
        private string _vAliqProd;
        
        private string _vCOFINS;
        
        private static XmlSerializer serializer;
        
        public string CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        public string qBCProd
        {
            get
            {
                return this._qBCProd;
            }
            set
            {
                this._qBCProd = value;
            }
        }
        
        public string vAliqProd
        {
            get
            {
                return this._vAliqProd;
            }
            set
            {
                this._vAliqProd = value;
            }
        }
        
        public string vCOFINS
        {
            get
            {
                return this._vCOFINS;
            }
            set
            {
                this._vCOFINS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether CST should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCST()
        {
            return !string.IsNullOrEmpty(CST);
        }
        
        /// <summary>
        /// Test whether qBCProd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeqBCProd()
        {
            return !string.IsNullOrEmpty(qBCProd);
        }
        
        /// <summary>
        /// Test whether vAliqProd should be serialized
        /// </summary>
        public virtual bool ShouldSerializevAliqProd()
        {
            return !string.IsNullOrEmpty(vAliqProd);
        }
        
        /// <summary>
        /// Test whether vCOFINS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevCOFINS()
        {
            return !string.IsNullOrEmpty(vCOFINS);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSQtde LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN
    {
        
        private string _cST;
        
        private static XmlSerializer serializer;
        
        public string CST
        {
            get
            {
                return this._cST;
            }
            set
            {
                this._cST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether CST should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCST()
        {
            return !string.IsNullOrEmpty(CST);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSCOFINSSN LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeDetImpostoCOFINSST
    {
        
        private string[] _items;
        
        private ItemsChoiceType3[] _itemsElementName;
        
        private string _vCOFINS;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("pCOFINS")]
        [System.Xml.Serialization.XmlElementAttribute("qBCProd")]
        [System.Xml.Serialization.XmlElementAttribute("vAliqProd")]
        [System.Xml.Serialization.XmlElementAttribute("vBC")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public string[] Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType3[] ItemsElementName
        {
            get
            {
                return this._itemsElementName;
            }
            set
            {
                this._itemsElementName = value;
            }
        }
        
        public string vCOFINS
        {
            get
            {
                return this._vCOFINS;
            }
            set
            {
                this._vCOFINS = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeDetImpostoCOFINSST));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether vCOFINS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevCOFINS()
        {
            return !string.IsNullOrEmpty(vCOFINS);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINSST object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeDetImpostoCOFINSST object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINSST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINSST);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeDetImpostoCOFINSST obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSST Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeDetImpostoCOFINSST)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSST Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeDetImpostoCOFINSST)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeDetImpostoCOFINSST object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeDetImpostoCOFINSST object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeDetImpostoCOFINSST object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINSST obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeDetImpostoCOFINSST);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeDetImpostoCOFINSST obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeDetImpostoCOFINSST LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public enum ItemsChoiceType3
    {
        
        /// <remarks/>
        pCOFINS,
        
        /// <remarks/>
        qBCProd,
        
        /// <remarks/>
        vAliqProd,
        
        /// <remarks/>
        vBC,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeTotal
    {
        
        private envCFeCFeInfCFeTotalICMSTot _iCMSTot;
        
        private string _vCFe;
        
        private envCFeCFeInfCFeTotalISSQNtot _iSSQNtot;
        
        private envCFeCFeInfCFeTotalDescAcrEntr _descAcrEntr;
        
        private string _vCFeLei12741;
        
        private static XmlSerializer serializer;
        
        public envCFeCFeInfCFeTotal()
        {
            this._descAcrEntr = new envCFeCFeInfCFeTotalDescAcrEntr();
            this._iSSQNtot = new envCFeCFeInfCFeTotalISSQNtot();
            this._iCMSTot = new envCFeCFeInfCFeTotalICMSTot();
        }
        
        public envCFeCFeInfCFeTotalICMSTot ICMSTot
        {
            get
            {
                return this._iCMSTot;
            }
            set
            {
                this._iCMSTot = value;
            }
        }
        
        public string vCFe
        {
            get
            {
                return this._vCFe;
            }
            set
            {
                this._vCFe = value;
            }
        }
        
        public envCFeCFeInfCFeTotalISSQNtot ISSQNtot
        {
            get
            {
                return this._iSSQNtot;
            }
            set
            {
                this._iSSQNtot = value;
            }
        }
        
        public envCFeCFeInfCFeTotalDescAcrEntr DescAcrEntr
        {
            get
            {
                return this._descAcrEntr;
            }
            set
            {
                this._descAcrEntr = value;
            }
        }
        
        public string vCFeLei12741
        {
            get
            {
                return this._vCFeLei12741;
            }
            set
            {
                this._vCFeLei12741 = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeTotal));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether ICMSTot should be serialized
        /// </summary>
        public virtual bool ShouldSerializeICMSTot()
        {
            return !string.IsNullOrEmpty(_iCMSTot.vICMS);            
        }
        
        /// <summary>
        /// Test whether ISSQNtot should be serialized
        /// </summary>
        public virtual bool ShouldSerializeISSQNtot()
        {
            return !string.IsNullOrEmpty(_iSSQNtot.vISS);            
        }
        
        /// <summary>
        /// Test whether DescAcrEntr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDescAcrEntr()
        {
            return (_descAcrEntr != null);
        }
        
        /// <summary>
        /// Test whether vCFe should be serialized
        /// </summary>
        public virtual bool ShouldSerializevCFe()
        {
            return !string.IsNullOrEmpty(vCFe);
        }
        
        /// <summary>
        /// Test whether vCFeLei12741 should be serialized
        /// </summary>
        public virtual bool ShouldSerializevCFeLei12741()
        {
            return !string.IsNullOrEmpty(vCFeLei12741);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeTotal object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeTotal object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeTotal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeTotal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeTotal);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeTotal obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeTotal Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeTotal)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeTotal Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeTotal)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeTotal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeTotal object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeTotal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeTotal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeTotal);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeTotal obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeTotal LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeTotalICMSTot
    {
        
        private string _vICMS;
        
        private string _vProd;
        
        private string _vDesc;
        
        private string _vPIS;
        
        private string _vCOFINS;
        
        private string _vPISST;
        
        private string _vCOFINSST;
        
        private string _vOutro;
        
        private static XmlSerializer serializer;
        
        public string vICMS
        {
            get
            {
                return this._vICMS;
            }
            set
            {
                this._vICMS = value;
            }
        }
        
        public string vProd
        {
            get
            {
                return this._vProd;
            }
            set
            {
                this._vProd = value;
            }
        }
        
        public string vDesc
        {
            get
            {
                return this._vDesc;
            }
            set
            {
                this._vDesc = value;
            }
        }
        
        public string vPIS
        {
            get
            {
                return this._vPIS;
            }
            set
            {
                this._vPIS = value;
            }
        }
        
        public string vCOFINS
        {
            get
            {
                return this._vCOFINS;
            }
            set
            {
                this._vCOFINS = value;
            }
        }
        
        public string vPISST
        {
            get
            {
                return this._vPISST;
            }
            set
            {
                this._vPISST = value;
            }
        }
        
        public string vCOFINSST
        {
            get
            {
                return this._vCOFINSST;
            }
            set
            {
                this._vCOFINSST = value;
            }
        }
        
        public string vOutro
        {
            get
            {
                return this._vOutro;
            }
            set
            {
                this._vOutro = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeTotalICMSTot));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether vICMS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevICMS()
        {
            return !string.IsNullOrEmpty(vICMS);
        }
        
        /// <summary>
        /// Test whether vProd should be serialized
        /// </summary>
        public virtual bool ShouldSerializevProd()
        {
            return !string.IsNullOrEmpty(vProd);
        }
        
        /// <summary>
        /// Test whether vDesc should be serialized
        /// </summary>
        public virtual bool ShouldSerializevDesc()
        {
            return !string.IsNullOrEmpty(vDesc);
        }
        
        /// <summary>
        /// Test whether vPIS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevPIS()
        {
            return !string.IsNullOrEmpty(vPIS);
        }
        
        /// <summary>
        /// Test whether vCOFINS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevCOFINS()
        {
            return !string.IsNullOrEmpty(vCOFINS);
        }
                
        /// <summary>
        /// Test whether vOutro should be serialized
        /// </summary>
        public virtual bool ShouldSerializevOutro()
        {
            return !string.IsNullOrEmpty(vOutro);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeTotalICMSTot object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeTotalICMSTot object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeTotalICMSTot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeTotalICMSTot obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeTotalICMSTot);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeTotalICMSTot obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeTotalICMSTot Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeTotalICMSTot)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeTotalICMSTot Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeTotalICMSTot)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeTotalICMSTot object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeTotalICMSTot object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeTotalICMSTot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeTotalICMSTot obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeTotalICMSTot);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeTotalICMSTot obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeTotalICMSTot LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeTotalISSQNtot
    {
        
        private string _vBC;
        
        private string _vISS;
        
        private string _vPIS;
        
        private string _vCOFINS;
        
        private string _vPISST;
        
        private string _vCOFINSST;
        
        private static XmlSerializer serializer;
        
        public string vBC
        {
            get
            {
                return this._vBC;
            }
            set
            {
                this._vBC = value;
            }
        }
        
        public string vISS
        {
            get
            {
                return this._vISS;
            }
            set
            {
                this._vISS = value;
            }
        }
        
        public string vPIS
        {
            get
            {
                return this._vPIS;
            }
            set
            {
                this._vPIS = value;
            }
        }
        
        public string vCOFINS
        {
            get
            {
                return this._vCOFINS;
            }
            set
            {
                this._vCOFINS = value;
            }
        }
        
        public string vPISST
        {
            get
            {
                return this._vPISST;
            }
            set
            {
                this._vPISST = value;
            }
        }
        
        public string vCOFINSST
        {
            get
            {
                return this._vCOFINSST;
            }
            set
            {
                this._vCOFINSST = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeTotalISSQNtot));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether vBC should be serialized
        /// </summary>
        public virtual bool ShouldSerializevBC()
        {
            return !string.IsNullOrEmpty(vBC);
        }
        
        /// <summary>
        /// Test whether vISS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevISS()
        {
            return !string.IsNullOrEmpty(vISS);
        }
        
        /// <summary>
        /// Test whether vPIS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevPIS()
        {
            return !string.IsNullOrEmpty(vPIS);
        }
        
        /// <summary>
        /// Test whether vCOFINS should be serialized
        /// </summary>
        public virtual bool ShouldSerializevCOFINS()
        {
            return !string.IsNullOrEmpty(vCOFINS);
        }
        
        /// <summary>
        /// Test whether vPISST should be serialized
        /// </summary>
        public virtual bool ShouldSerializevPISST()
        {
            return !string.IsNullOrEmpty(vPISST);
        }
        
        /// <summary>
        /// Test whether vCOFINSST should be serialized
        /// </summary>
        public virtual bool ShouldSerializevCOFINSST()
        {
            return !string.IsNullOrEmpty(vCOFINSST);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeTotalISSQNtot object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeTotalISSQNtot object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeTotalISSQNtot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeTotalISSQNtot obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeTotalISSQNtot);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeTotalISSQNtot obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeTotalISSQNtot Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeTotalISSQNtot)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeTotalISSQNtot Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeTotalISSQNtot)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeTotalISSQNtot object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeTotalISSQNtot object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeTotalISSQNtot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeTotalISSQNtot obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeTotalISSQNtot);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeTotalISSQNtot obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeTotalISSQNtot LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeTotalDescAcrEntr
    {
        
        private bool _shouldSerializeItemElementName;
        
        private string _item;
        
        private ItemChoiceType1 _itemElementName;
        
        private static XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("vAcresSubtot")]
        [System.Xml.Serialization.XmlElementAttribute("vDescSubtot")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType1 ItemElementName
        {
            get
            {
                return this._itemElementName;
            }
            set
            {
                this._itemElementName = value;
                _shouldSerializeItemElementName = true;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeTotalDescAcrEntr));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (_itemElementName != default(ItemChoiceType1));
        }
        
        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeTotalDescAcrEntr object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeTotalDescAcrEntr object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeTotalDescAcrEntr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeTotalDescAcrEntr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeTotalDescAcrEntr);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeTotalDescAcrEntr obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeTotalDescAcrEntr Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeTotalDescAcrEntr)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeTotalDescAcrEntr Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeTotalDescAcrEntr)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeTotalDescAcrEntr object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeTotalDescAcrEntr object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeTotalDescAcrEntr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeTotalDescAcrEntr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeTotalDescAcrEntr);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeTotalDescAcrEntr obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeTotalDescAcrEntr LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema=false)]
    public enum ItemChoiceType1
    {
        
        /// <remarks/>
        vAcresSubtot,
        
        /// <remarks/>
        vDescSubtot,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFePgto
    {
        
        private List<envCFeCFeInfCFePgtoMP> _mp;
        
        private string _vTroco;
        
        private static XmlSerializer serializer;
        
        public envCFeCFeInfCFePgto()
        {
            this._mp = new List<envCFeCFeInfCFePgtoMP>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("MP")]
        public List<envCFeCFeInfCFePgtoMP> MP
        {
            get
            {
                return this._mp;
            }
            set
            {
                this._mp = value;
            }
        }
        
        public string vTroco
        {
            get
            {
                return this._vTroco;
            }
            set
            {
                this._vTroco = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFePgto));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether MP should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMP()
        {
            return MP != null && MP.Count > 0;
        }
        
        /// <summary>
        /// Test whether vTroco should be serialized
        /// </summary>
        public virtual bool ShouldSerializevTroco()
        {
            return !string.IsNullOrEmpty(vTroco);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFePgto object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFePgto object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFePgto object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFePgto obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFePgto);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFePgto obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFePgto Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFePgto)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFePgto Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFePgto)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFePgto object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFePgto object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFePgto object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFePgto obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFePgto);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFePgto obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFePgto LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFePgtoMP
    {
        
        private string _cMP;
        
        private string _vMP;
        
        private string _cAdmC;
        
        private static XmlSerializer serializer;
        
        public string cMP
        {
            get
            {
                return this._cMP;
            }
            set
            {
                this._cMP = value;
            }
        }
        
        public string vMP
        {
            get
            {
                return this._vMP;
            }
            set
            {
                this._vMP = value;
            }
        }
        
        public string cAdmC
        {
            get
            {
                return this._cAdmC;
            }
            set
            {
                this._cAdmC = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFePgtoMP));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether cMP should be serialized
        /// </summary>
        public virtual bool ShouldSerializecMP()
        {
            return !string.IsNullOrEmpty(cMP);
        }
        
        /// <summary>
        /// Test whether vMP should be serialized
        /// </summary>
        public virtual bool ShouldSerializevMP()
        {
            return !string.IsNullOrEmpty(vMP);
        }
        
        /// <summary>
        /// Test whether cAdmC should be serialized
        /// </summary>
        public virtual bool ShouldSerializecAdmC()
        {
            return !string.IsNullOrEmpty(cAdmC);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFePgtoMP object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFePgtoMP object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFePgtoMP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFePgtoMP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFePgtoMP);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFePgtoMP obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFePgtoMP Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFePgtoMP)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFePgtoMP Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFePgtoMP)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFePgtoMP object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFePgtoMP object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFePgtoMP object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFePgtoMP obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFePgtoMP);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFePgtoMP obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFePgtoMP LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeInfAdic
    {
        
        private string _infCpl;
        
        private List<envCFeCFeInfCFeInfAdicObsFisco> _obsFisco;
        
        private static XmlSerializer serializer;
        
        public envCFeCFeInfCFeInfAdic()
        {
            this._obsFisco = new List<envCFeCFeInfCFeInfAdicObsFisco>();
        }
        
        public string infCpl
        {
            get
            {
                return this._infCpl;
            }
            set
            {
                this._infCpl = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("obsFisco")]
        public List<envCFeCFeInfCFeInfAdicObsFisco> obsFisco
        {
            get
            {
                return this._obsFisco;
            }
            set
            {
                this._obsFisco = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeInfAdic));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether obsFisco should be serialized
        /// </summary>
        public virtual bool ShouldSerializeobsFisco()
        {
            return obsFisco != null && obsFisco.Count > 0;
        }
        
        /// <summary>
        /// Test whether infCpl should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfCpl()
        {
            return !string.IsNullOrEmpty(infCpl);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeInfAdic object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeInfAdic object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeInfAdic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeInfAdic obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeInfAdic);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeInfAdic obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeInfAdic Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeInfAdic)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeInfAdic Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeInfAdic)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeInfAdic object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeInfAdic object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeInfAdic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeInfAdic obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeInfAdic);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeInfAdic obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeInfAdic LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.1586.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true)]
    public partial class envCFeCFeInfCFeInfAdicObsFisco
    {
        
        private string _xTexto;
        
        private string _xCampo;
        
        private static XmlSerializer serializer;
        
        public string xTexto
        {
            get
            {
                return this._xTexto;
            }
            set
            {
                this._xTexto = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string xCampo
        {
            get
            {
                return this._xCampo;
            }
            set
            {
                this._xCampo = value;
            }
        }
        
        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(envCFeCFeInfCFeInfAdicObsFisco));
                }
                return serializer;
            }
        }
        
        /// <summary>
        /// Test whether xTexto should be serialized
        /// </summary>
        public virtual bool ShouldSerializexTexto()
        {
            return !string.IsNullOrEmpty(xTexto);
        }
        
        /// <summary>
        /// Test whether xCampo should be serialized
        /// </summary>
        public virtual bool ShouldSerializexCampo()
        {
            return !string.IsNullOrEmpty(xCampo);
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current envCFeCFeInfCFeInfAdicObsFisco object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes workflow markup into an envCFeCFeInfCFeInfAdicObsFisco object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeInfAdicObsFisco object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out envCFeCFeInfCFeInfAdicObsFisco obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeInfAdicObsFisco);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string input, out envCFeCFeInfCFeInfAdicObsFisco obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeInfAdicObsFisco Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((envCFeCFeInfCFeInfAdicObsFisco)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }
        
        public static envCFeCFeInfCFeInfAdicObsFisco Deserialize(System.IO.Stream s)
        {
            return ((envCFeCFeInfCFeInfAdicObsFisco)(Serializer.Deserialize(s)));
        }
        #endregion
        
        /// <summary>
        /// Serializes current envCFeCFeInfCFeInfAdicObsFisco object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }
        
        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an envCFeCFeInfCFeInfAdicObsFisco object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output envCFeCFeInfCFeInfAdicObsFisco object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeInfAdicObsFisco obj, out System.Exception exception)
        {
            exception = null;
            obj = default(envCFeCFeInfCFeInfAdicObsFisco);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out envCFeCFeInfCFeInfAdicObsFisco obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static envCFeCFeInfCFeInfAdicObsFisco LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
